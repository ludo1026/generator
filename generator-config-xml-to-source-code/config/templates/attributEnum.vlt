#set( $bean = $!{templateGenerationMap.getByClasseGenId("bean_template",$!{classe.getGenId()})} )
#set( $attributEnum = $!{templateGenerationMap.getByClasseGenId("attributEnum",$!{classe.getGenId()})} )
package $!{attributEnum.getNomPackage()};

/**
 * Attributs modifiable pour l'entite : ${bean.getNom()}.
 */
public enum $!{attributEnum.getNom()} {
#foreach( $attribut in $classe.getGenAttributs() )
#if( $attribut.getDescription() )
	/** $!{SU.capitalize($!{attribut.getDescription()})} */
#end
	$!{SU.uncapitalize($!{attribut.getNomJava()})}("$!{attribut.getNomSQL()}",Type.$!{SU.upperCase($!{attribut.getType()})}),
#end

#foreach( $association in $classe.getGenAssociations() )
#foreach( $assoAttribut in $association.getGenAssociationAttributs() )
	${association.getClasseGenId()}("$!{assoAttribut.getGenId()}",Type.$!{SU.upperCase($!{classe.getGenAttributs().getGenAttributForNomJava("$!{assoAttribut.getGenId()}").getType()})}),
#end
#end
	;

	/**
	 * Nom du champ en base de données.
	 */
	private final String nomSQL;

	/**
	 * Type du champ en base de données.
	 */
	private final Type type;
	
	/**
	 * Constructeur.
	 * @param nomSQL Nom du champ SQL.
	 */
	private $!{attributEnum.getNom()}(String nomSQL, Type type) {
		this.nomSQL = nomSQL;
		this.type = type;
	}

	public String getNomSQL() {
		return nomSQL;
	}
	
	public Type getType() {
		return type;
	}
	
	/**
	 * Retourne la valeur de l'énumération en fonction du nom SQL.
	 * @param nomSQL Nom SQL de l'attribut.
	 * @return Valeur de l'énumération.
	 */
	public static $!{attributEnum.getNom()} getEnumForNomSQL(String nomSQL) {
		nomSQL = StringUtils.trimToEmpty(nomSQL);
		for($!{attributEnum.getNom()} $!{SU.uncapitalize($!{attributEnum.getNom()})} : values()) {
			if(StringUtils.equalsIgnoreCase($!{SU.uncapitalize($!{attributEnum.getNom()})}.getNomSQL(), nomSQL)) {
				return $!{SU.uncapitalize($!{attributEnum.getNom()})};
			}
		}
		return null;
	}

}